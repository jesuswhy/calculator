async function fetchUSDRate() {
    const url = 'https://api.allorigins.win/get?url=' + encodeURIComponent('https://www.cbr.ru/scripts/XML_daily.asp');

    try {
        const response = await fetch(url);

        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: ${response.status}`);
        }

        const data = await response.json(); 
        const xml = data.contents; 

   
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(xml, 'text/xml');
        const valutes = xmlDoc.getElementsByTagName('Valute');

        let usdRate = null;


        for (let valute of valutes) {
            const charCode = valute.getElementsByTagName('CharCode')[0].textContent;
            if (charCode === 'USD') {
                usdRate = valute.getElementsByTagName('Value')[0].textContent;
                break;
            }
        }

        if (usdRate) {
           
            const formattedUSDRate = usdRate.replace(',', '.');

          
            const usdRateElement = document.getElementById('usdRate');
            if (usdRateElement) {
                usdRateElement.textContent = `${formattedUSDRate}`; 
            }
            console.log('–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: ' + formattedUSDRate);
        } else {
            console.error('–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}




  function calculatePrice() {
    const usdRate = parseFloat(document.getElementById('usdRate').textContent) || 0;
    const cnyRate = parseFloat(document.getElementById('cnyRate').textContent) || 0;
    const purchasePrice = parseFloat(document.getElementById('purchasePrice').value);
    const logisticsCostUSD = parseFloat(document.getElementById('logisticsCostUSD').value);
    const customDutyRate = parseFloat(document.getElementById('customDuty').value) / 100; 
    const advance = parseFloat(document.getElementById('advance').value) / 100; 
    const moneyTerm = parseInt(document.getElementById('moneyTerm').value);
    const markup = parseFloat(document.getElementById('markup').value);
    const survey = 600; 

    const logisticsCostRUB = logisticsCostUSD * usdRate;

    const totalCost = purchasePrice + logisticsCostRUB;

    const interestRate = 0.0003896103896; 
    const remainingAmount = totalCost * (1 - advance);
    const interestCost = remainingAmount * interestRate * moneyTerm;

    const VATRefund = purchasePrice / 1.1 * 0.1;

    const preSalePrice = ((totalCost + interestCost + survey) - VATRefund) * (1 + markup / 100);

    const customDuty = (preSalePrice) * customDutyRate;

    const salePrice = preSalePrice + customDuty;

    const salePriceCNY = salePrice / cnyRate - 20;

    document.getElementById('result').textContent = `${salePriceCNY.toFixed(0)} ¬•/—Ç–Ω`; 
}




function calculatePurchasePrice() {
    const usdRate = parseFloat(document.getElementById('usdRate').textContent) || 0;
    const cnyRate = parseFloat(document.getElementById('cnyRate').textContent) || 0;
    const salePriceCNY = parseFloat(document.getElementById('marketPrice2').value);
    const logisticsCostUSD = parseFloat(document.getElementById('logisticsCostUSD2').value);
    const customDutyRate = parseFloat(document.getElementById('customDuty2').value) / 100; 
    const advance = parseFloat(document.getElementById('advance2').value) / 100; 
    const moneyTerm = parseInt(document.getElementById('moneyTerm2').value);
    const markup = parseFloat(document.getElementById('markup2').value);
    const survey = 600; 

    const salePriceRUB = salePriceCNY * cnyRate;

    const customDuty = salePriceRUB * customDutyRate;

    const preSalePrice = salePriceRUB - customDuty;

    const VATRefund = (preSalePrice - survey) / 1.1 * 0.1;

    const totalCost = (preSalePrice + VATRefund) / (1 + markup / 100);

    const interestRate = 0.0003896103896; 
    const remainingAmount = totalCost * (1 - advance); 
    const interestCost = remainingAmount * interestRate * moneyTerm;

    const purchasePrice = totalCost - interestCost;

    const logisticsCostRUB = logisticsCostUSD * usdRate;

    const finalPurchasePrice = purchasePrice - logisticsCostRUB - survey;

document.getElementById('purchasePriceResult').textContent = `${finalPurchasePrice.toFixed(0)} ‚ÇΩ/—Ç–Ω`; 

}



async function fetchCNYRateFromCB() {
    const url = 'https://api.allorigins.win/get?url=' + encodeURIComponent('https://www.cbr.ru/scripts/XML_daily.asp');

    try {
        const response = await fetch(url);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: ' + response.status);
        
        const data = await response.json();
        const xml = data.contents;
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(xml, 'text/xml');
        const valutes = xmlDoc.getElementsByTagName('Valute');

        let cnyRate = null;
        for (let valute of valutes) {
            const charCode = valute.getElementsByTagName('CharCode')[0].textContent;
            if (charCode === 'CNY') {
                cnyRate = valute.getElementsByTagName('Value')[0].textContent.replace(',', '.');
                break;
            }
        }

        return cnyRate ? parseFloat(cnyRate) : null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ —Å –¶–ë:', error);
        return null;
    }
}

function fetchCNYRateFromMOEX() {
    return new Promise((resolve, reject) => {
        const url = 'https://iss.moex.com/iss/engines/currency/markets/selt/securities.jsonp?iss.only=securities,marketdata&securities=CETS:CNYRUB_TOM&iss.meta=off&iss.json=extended&callback=parseMOEXData&lang=ru';
        const script = document.createElement('script');
        script.src = url;

        window.parseMOEXData = function(data) {
            try {
                if (Array.isArray(data) && data.length > 1) {
                    const marketData = data[1].marketdata;
                    const cnyData = marketData.find(item => item.SECID === "CNYRUB_TOM");
                    if (cnyData) {
                        resolve(parseFloat(cnyData.LAST));
                    } else {
                        reject('–ö—É—Ä—Å —é–∞–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ MOEX.');
                    }
                } else {
                    reject('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.');
                }
            } catch (error) {
                reject('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö MOEX: ' + error);
            }
        };

        document.body.appendChild(script);
    });
}

async function fetchCNYRate() {
    try {
        const cnyRateCB = await fetchCNYRateFromCB();
        const cnyRateMOEX = await fetchCNYRateFromMOEX();

        const cnyRate = Math.min(cnyRateCB || Infinity, cnyRateMOEX || Infinity);

        const cnyRateElement = document.getElementById('cnyRate');
        const cnySourceElement = document.getElementById('cnySource');

        cnyRateElement.textContent = cnyRate.toFixed(2);
        if (cnyRate === cnyRateCB) {
            cnySourceElement.textContent = '–ò—Å—Ç–æ—á–Ω–∏–∫: –¶–ë –†–§';
        } else {
            cnySourceElement.textContent = '–ò—Å—Ç–æ—á–Ω–∏–∫: MOEX';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ —é–∞–Ω—è:', error);
        document.getElementById('cnyRate').textContent = '–û—à–∏–±–∫–∞';
    }
}

function openModal(modalId) {
    document.getElementById(modalId).style.display = 'flex';
}

function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}


let currentCalculator = ''; 

function openTelegramModal(calculatorType) {
    currentCalculator = calculatorType;
    document.getElementById('telegramModal').style.display = 'flex';
}

function closeTelegramModal() {
    document.getElementById('telegramModal').style.display = 'none';
}

window.onclick = function(event) {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
};

  
  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
  function showAlert() {
    const alertBox = document.getElementById("successAlert");
    alertBox.style.display = "flex"; // –ü–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç
  }
  
  // –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
  function closeAlert() {
    const alertBox = document.getElementById("successAlert");
    alertBox.style.display = "none"; // –°–∫—Ä—ã—Ç—å –∞–ª–µ—Ä—Ç
  }
  


async function sendTelegram() {
    const chatType = document.getElementById('telegramChatSelect').value;
    if (!chatType) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.');
        return;
    }

    let message = '';
    if (currentCalculator === 'sell') {
        const purchasePrice = document.getElementById('purchasePrice').value || '0';
        const logisticsCostUSD = document.getElementById('logisticsCostUSD').value || '0';
        const customDuty = document.getElementById('customDuty').value || '0';
        const advance = document.getElementById('advance').value || '0';
        const moneyTerm = document.getElementById('moneyTerm').value || '0';
        const markup = document.getElementById('markup').value || '0';
        const result = document.getElementById('result').textContent || '0 ¬•/—Ç–Ω';

        message = `üè∑Ô∏è *–ü—Ä–æ–¥–∞–∂–∞*\n` +
                  `–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏: ${purchasePrice} ‚ÇΩ/—Ç–Ω\n` +
                  `–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–∏: ${logisticsCostUSD} $/—Ç–Ω\n` +
                  `–ü–æ—à–ª–∏–Ω–∞: ${customDuty}%\n` +
                  `–†–∞–∑–º–µ—Ä –∞–≤–∞–Ω—Å–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: ${advance}%\n` +
                  `–°—Ä–æ–∫ –¥–µ–Ω–µ–≥: ${moneyTerm} –¥–Ω–µ–π\n` +
                  `–ú–∞—Ä–∂–∞: ${markup}%\n` +
                  `üëâ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ${result}`;
    } else if (currentCalculator === 'buy') {
        const marketPrice2 = document.getElementById('marketPrice2').value || '0';
        const logisticsCostUSD2 = document.getElementById('logisticsCostUSD2').value || '0';
        const customDuty2 = document.getElementById('customDuty2').value || '0';
        const advance2 = document.getElementById('advance2').value || '0';
        const moneyTerm2 = document.getElementById('moneyTerm2').value || '0';
        const markup2 = document.getElementById('markup2').value || '0';
        const purchasePriceResult = document.getElementById('purchasePriceResult').textContent || '0 ‚ÇΩ/—Ç–Ω';

        message = `üõí *–ó–∞–∫—É–ø–∫–∞*\n` +
                  `–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ${marketPrice2} ¬•/—Ç–Ω\n` +
                  `–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–∏: ${logisticsCostUSD2} $/—Ç–Ω\n` +
                  `–ü–æ—à–ª–∏–Ω–∞: ${customDuty2}%\n` +
                  `–†–∞–∑–º–µ—Ä –∞–≤–∞–Ω—Å–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: ${advance2}%\n` +
                  `–°—Ä–æ–∫ –¥–µ–Ω–µ–≥: ${moneyTerm2} –¥–Ω–µ–π\n` +
                  `–ú–∞—Ä–∂–∞: ${markup2}%\n` +
                  `üëâ –¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏ —Å –ù–î–°: ${purchasePriceResult}`;
    } else {
        alert('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞.');
        return;
    }

    const botToken = '7034021771:AAFJMbmA2XjGFFpvQqTymR_AJ5-xwKq1g6c'; 
    const buyerChannelID = '-1002049012362';  
    const supplierChannelID = '-1001855848392';  

    let chatID = '';
    if (chatType === 'buyer') {
        chatID = buyerChannelID;
    } else if (chatType === 'supplier') {
        chatID = supplierChannelID;
    } else {
        alert('–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —á–∞—Ç–∞.');
        return;
    }

    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                chat_id: chatID,
                text: message,
                parse_mode: 'Markdown'
            })
        });

        const result = await response.json();
        if (result.ok) {
            showAlert();
            closeTelegramModal();
        } else {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', result.description);
            alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    }
}



window.onclick = function(event) {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
};

function switchCalculator() {
    const isChecked = document.getElementById('calculatorSwitch').checked;
    const sellCalculator = document.querySelector('#calcFormSell').closest('.container');
    const buyCalculator = document.querySelector('#calcFormBuy').closest('.container');
    const resultBox = document.querySelectorAll('.result-box'); // –í—Å–µ –±–ª–æ–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    const calcButtonSell = document.querySelector('#calcFormSell button'); // –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
    const calcButtonBuy = document.querySelector('#calcFormBuy button'); // –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –∑–∞–∫—É–ø–∫–∏

    if (isChecked) {
        sellCalculator.style.display = 'none'; // –°–∫—Ä—ã—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–æ–¥–∞–∂–∏
        buyCalculator.style.display = 'block'; // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–∫—É–ø–∫–∏

        // –ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç–∞ –¥–ª—è –∑–∞–∫—É–ø–∫–∏
        calcButtonBuy.style.backgroundColor = '#FF6F61'; // –û—Ä–∞–Ω–∂–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫—É–ø–∫–∏
        resultBox.forEach(box => box.style.borderColor = '#FF6F61'); // –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–º–∫—É –±–ª–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    } else {
        sellCalculator.style.display = 'block'; // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–æ–¥–∞–∂–∏
        buyCalculator.style.display = 'none'; // –°–∫—Ä—ã—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–∫—É–ø–∫–∏

        // –ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        calcButtonSell.style.backgroundColor = '#009688'; // –ó–µ–ª–µ–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        resultBox.forEach(box => box.style.borderColor = '#009688'); // –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–º–∫—É –±–ª–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    }
}





// –ü—Ä—è—á–µ–º —Ñ–æ—Ä–º—É –ó–∞–∫—É–ø–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.onload = function() {
    fetchCNYRate();
    fetchUSDRate();
    switchCalculator(); 
};


  

// –í—ã–∑—ã–≤–∞–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑–∞—Ç—å "–ü—Ä–æ–¥–∞–∂—É"
document.addEventListener("DOMContentLoaded", function() {
    switchCalculator();
});
